"use strict";(self.webpackChunkfeedback_map=self.webpackChunkfeedback_map||[]).push([[46640],{24450:(e,i,t)=>{t.r(i),t.d(i,{default:()=>M});var r=t(35143),s=t(18690),a=t(94643),n=t(73763),o=t(54901),l=t(68134),h=t(46053),c=(t(81806),t(76460),t(85842)),d=t(58380),u=t(75258),m=t(57562),p=t(26170),g=t(95808),v=t(65146),w=t(75747),_=t(56286),y=t(31394),f=t(69679),A=t(91196);const k=["route-info","direction-line","direction-point","polygon-barrier","polyline-barrier","point-barrier","stop"],T={graphic:null,property:null,oldValue:null,newValue:null};function N(e){return e instanceof d.A||e instanceof u.A||e instanceof m.A||e instanceof p.A||e instanceof g.A||e instanceof v.A||e instanceof w.A}const S=new Set(["default"]);let U=class extends((0,_.e)(A.A)){constructor(){super(...arguments),this._graphics=new a.A,this._highlightIds=new Map,this._networkFeatureMap=new Map,this._networkGraphicMap=new Map,this._interaction=null,this._loadInteractionPromise=null,this.interactive=!1}get _routeItems(){return new n.A({getCollections:()=>null==this.layer||this.destroyed?[]:[null!=this.layer.routeInfo?new a.A([this.layer.routeInfo]):null,this.layer.directionLines,this.layer.directionPoints,this.layer.polygonBarriers,this.layer.polylineBarriers,this.layer.pointBarriers,this.layer.stops]})}initialize(){this.addHandles((0,l.wB)((()=>{const{interactive:e,suspended:i}=this;return{interactive:e,suspended:i}}),(e=>{let{interactive:i,suspended:t}=e;const r=i&&!t;r&&this._getInteractionLoadPromise().then((e=>{e.enabled=this.interactive&&!this.suspended})),this._interaction&&(this._interaction.enabled=r)}),l.pc)),this._updatingHandles.addOnCollectionChange((()=>this._routeItems),(e=>this._routeItemsChanged(e)),l.Vh)}destroy(){this._networkFeatureMap.clear(),this._networkGraphicMap.clear(),this._graphics.removeAll(),this._get("_routeItems")?.destroy()}attach(){this._createGraphicsView()}detach(){this._destroyGraphicsView(),this._interaction?.enabled&&(this._interaction.enabled=!1)}get selectedNetworkFeatures(){return this._interaction?.selectedNetworkFeatures??null}async create(e){if(this.interactive)return(await this._getInteractionLoadPromise()).create(e)}async fetchPopupFeaturesAtLocation(e,i){return this._graphicsView.hitTest(e).filter((e=>{let{popupTemplate:i}=e;return!!i}))}highlight(e){let i;i=N(e)?[this._getNetworkFeatureUid(e)]:function(e){return Array.isArray(e)&&e.length>0&&N(e[0])}(e)?e.map((e=>this._getNetworkFeatureUid(e))):function(e){return a.A.isCollection(e)&&e.length&&N(e.at(0))}(e)?e.map((e=>this._getNetworkFeatureUid(e))).toArray():[e.uid];const t=i.filter(s.Ru);return t.length?(this._addHighlight(t),(0,o.hA)((()=>this._removeHighlight(t)))):(0,o.hA)()}async hitTest(e,i){if(this.suspended)return null;const t=this._graphicsView.hitTest(e).filter(s.Ru).map((e=>this._networkGraphicMap.get(e)));if(!t.length)return null;const{layer:r}=this;return t.reverse().map((i=>({type:"route",layer:r,mapPoint:e,networkFeature:i})))}isUpdating(){return this._graphicsView.updating}moveEnd(){}remove(e){this._interaction?.remove(e)}update(e){this._graphicsView.processUpdate(e)}viewChange(){this._graphicsView.viewChange()}_addHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const e=this._highlightIds.get(i);this._highlightIds.set(i,e+1)}else this._highlightIds.set(i,1);this._updateHighlight()}_createGraphic(e){const i=e.toGraphic();return i.layer=this.layer,i.sourceLayer=this.layer,i}_createGraphicsView(){const e=this.view,i=new y.A(e.featuresTilingScheme);this._graphicsView=new f.A({container:i,graphics:this._graphics,requestUpdateCallback:()=>this.requestUpdate(),view:e}),this.container.addChild(i),this._updateHighlight()}_destroyGraphicsView(){this.container.removeChild(this._graphicsView.container),this._graphicsView.destroy()}_getDrawOrder(e){const i=this._networkGraphicMap.get(e);return k.indexOf(i.type)}_getInteractionLoadPromise(){return this._loadInteractionPromise||(this._loadInteractionPromise=this._loadInteraction(),this._updatingHandles.addPromise(this._loadInteractionPromise)),this._loadInteractionPromise}_getNetworkFeatureUid(e){return this._networkFeatureMap.has(e)?this._networkFeatureMap.get(e).uid:null}async _loadInteraction(){const{layer:e,view:i}=this,{RouteLayerInteraction:r}=await Promise.all([t.e(21729),t.e(10898),t.e(14240),t.e(23105)]).then(t.bind(t,23105));return this._interaction=new r({view:i,layer:e}),this._interaction}_removeHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const e=this._highlightIds.get(i)-1;0===e?this._highlightIds.delete(i):this._highlightIds.set(i,e)}this._updateHighlight()}_routeItemsChanged(e){if(e.removed.length){this._graphics.removeMany(e.removed.map((e=>{const i=this._networkFeatureMap.get(e);return this._networkFeatureMap.delete(e),this._networkGraphicMap.delete(i),i})));for(const i of e.removed)this.removeHandles(i)}if(e.added.length){this._graphics.addMany(e.added.map((e=>{const i=this._createGraphic(e);return null==i.symbol?null:(this._networkFeatureMap.set(e,i),this._networkGraphicMap.set(i,e),i)})).filter(s.Ru));for(const i of e.added)this.addHandles([(0,l.wB)((()=>i.geometry),((e,t)=>{this._updateGraphic(i,"geometry",e,t)})),(0,l.wB)((()=>i.symbol),((e,t)=>{this._updateGraphic(i,"symbol",e,t)})),(0,l.wB)((()=>i.popupTemplate),(e=>{this._networkFeatureMap.has(i)&&(this._networkFeatureMap.get(i).popupTemplate=e)}))],i);this._graphics.sort(((e,i)=>this._getDrawOrder(e)-this._getDrawOrder(i)))}}_updateGraphic(e,i,t,r){if(!this._networkFeatureMap.has(e)){const i=this._createGraphic(e);return this._networkFeatureMap.set(e,i),this._networkGraphicMap.set(i,e),void this._graphics.add(i)}const s=this._networkFeatureMap.get(e);s[i]=t,T.graphic=s,T.property=i,T.oldValue=r,T.newValue=t,this._graphicsView.graphicUpdateHandler(T)}_updateHighlight(){const e=Array.from(this._highlightIds.keys()),i=this._getHighlightBits(S.values());this._graphicsView.setHighlight(e.map((e=>({objectId:e,highlightFlags:i}))))}};(0,r._)([(0,h.MZ)()],U.prototype,"_graphics",void 0),(0,r._)([(0,h.MZ)()],U.prototype,"_routeItems",null),(0,r._)([(0,h.MZ)()],U.prototype,"_interaction",void 0),(0,r._)([(0,h.MZ)()],U.prototype,"interactive",void 0),(0,r._)([(0,h.MZ)({readOnly:!0})],U.prototype,"selectedNetworkFeatures",null),U=(0,r._)([(0,c.$)("esri.views.2d.layers.RouteLayerView2D")],U);const M=U},31394:(e,i,t)=>{t.d(i,{A:()=>n});var r=t(61551),s=t(8995),a=t(13692);class n extends s.f{renderChildren(e){for(const i of this.children)i.setTransform(e.state);if(super.renderChildren(e),this._updateAttributeView(),this.children.some((e=>e.hasData))){switch(e.drawPhase){case r.S5.MAP:this._renderChildren(e,r.RI.All);break;case r.S5.HIGHLIGHT:this.hasHighlight&&this._renderHighlight(e)}this._boundsRenderer&&this._boundsRenderer.doRender(e)}}_renderHighlight(e){(0,a.lB)(e,!1,(e=>{this._renderChildren(e,r.RI.Highlight)}))}}},73103:(e,i,t)=>{t.d(i,{$n:()=>k,$r:()=>v,EM:()=>g,Ec:()=>b,JJ:()=>p,Mm:()=>N,OC:()=>U,Sr:()=>d,UO:()=>o,Vj:()=>O,WU:()=>D,Y8:()=>n,Z7:()=>l,_6:()=>f,aJ:()=>c,dd:()=>T,dn:()=>h,et:()=>S,fe:()=>y,gD:()=>A,hE:()=>u,hY:()=>a,iM:()=>_,mt:()=>w,ow:()=>m,vS:()=>M});var r=t(45802);const s={esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriUnknownUnits:"unknown",esriYards:"yards"},a=(0,r.O)()(s),n=(0,r.O)()({...s,esriIntFeet:"international-feet",esriIntInches:"international-inches",esriIntMiles:"international-miles",esriIntNauticalMiles:"international-nautical-miles",esriIntYards:"international-yards"}),o=(0,r.O)()({esriAcres:"international-acres",esriAcresUS:"us-acres",esriAres:"ares",esriHectares:"hectares",esriSquareCentimeters:"square-centimeters",esriSquareDecimeters:"square-decimeters",esriSquareFeet:"square-international-feet",esriSquareFeetUS:"square-us-feet",esriSquareInches:"square-international-inches",esriSquareInchesUS:"square-us-inches",esriSquareKilometers:"square-kilometers",esriSquareMeters:"square-meters",esriSquareMiles:"square-international-miles",esriSquareMilesUS:"square-us-miles",esriSquareMillimeters:"square-millimeters",esriSquareYards:"square-international-yards",esriSquareYardsUS:"square-us-yards",esriUnknownAreaUnits:"unknown"}),l=(0,r.O)()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards"}),h=(0,r.O)()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards",esriNAUDays:"days",esriNAUHours:"hours",esriNAUMinutes:"minutes",esriNAUSeconds:"seconds",esriNAUKilometersPerHour:"kilometers-per-hour",esriNAUMilesPerHour:"miles-per-hour",esriNAUUnknown:"unknown"}),c=(0,r.O)()({esriDOTComplete:"complete",esriDOTCompleteNoEvents:"complete-no-events",esriDOTFeatureSets:"featuresets",esriDOTInstructionsOnly:"instructions-only",esriDOTStandard:"standard",esriDOTSummaryOnly:"summary-only"}),d=(0,r.O)()({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"}),u=((0,r.O)()({esriNAOutputPolygonNone:"none",esriNAOutputPolygonSimplified:"simplified",esriNAOutputPolygonDetailed:"detailed"}),(0,r.O)()({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"})),m=((0,r.O)()({esriNATravelDirectionFromFacility:"from-facility",esriNATravelDirectionToFacility:"to-facility"}),(0,r.O)()({esriNATimeOfDayNotUsed:"not-used",esriNATimeOfDayUseAsStartTime:"start",esriNATimeOfDayUseAsEndTime:"end"}),(0,r.O)()({AUTOMOBILE:"automobile",TRUCK:"truck",WALK:"walk",OTHER:"other"})),p=(0,r.O)()({0:"either-side-of-vehicle",1:"right-side-of-vehicle",2:"left-side-of-vehicle",3:"no-u-turn"},{useNumericKeys:!0}),g=(0,r.O)()({0:"stop",1:"waypoint",2:"break"},{useNumericKeys:!0}),v=(0,r.O)()({0:"ok",1:"not-located",2:"network-element-not-located",3:"element-not-traversable",4:"invalid-field-values",5:"not-reached",6:"time-window-violation",7:"not-located-on-closest"},{useNumericKeys:!0}),w=(0,r.O)()({1:"right",2:"left"},{useNumericKeys:!0}),_=(0,r.O)()({0:"restriction",1:"scaled-cost",2:"added-cost"},{useNumericKeys:!0}),y=(0,r.O)()({0:"permit",1:"restrict"},{useNumericKeys:!0}),f=(0,r.O)()({1:"header",50:"arrive",51:"depart",52:"straight",100:"on-ferry",101:"off-ferry",102:"central-fork",103:"roundabout",104:"u-turn",150:"door",151:"stairs",152:"elevator",153:"escalator",154:"pedestrian-ramp",200:"left-fork",201:"left-ramp",202:"clockwise-roundabout",203:"left-handed-u-turn",204:"bear-left",205:"left-turn",206:"sharp-left",207:"left-turn-and-immediate-left-turn",208:"left-turn-and-immediate-right-turn",300:"right-fork",301:"right-ramp",302:"counter-clockwise-roundabout",303:"right-handed-u-turn",304:"bear-right",305:"right-turn",306:"sharp-right",307:"right-turn-and-immediate-left-turn",308:"right-turn-and-immediate-right-turn",400:"up-elevator",401:"up-escalator",402:"up-stairs",500:"down-elevator",501:"down-escalator",502:"down-stairs",1e3:"general-event",1001:"landmark",1002:"time-zone-change",1003:"traffic-event",1004:"scaled-cost-barrier-event",1005:"boundary-crossing",1006:"restriction-violation",1007:"lane"},{useNumericKeys:!0}),A=(0,r.O)()({0:"unknown",1:"segment",2:"maneuver-segment",3:"restriction-violation",4:"scaled-cost-barrier",5:"heavy-traffic",6:"slow-traffic",7:"moderate-traffic"},{useNumericKeys:!0}),k=(0,r.O)()({"NA Campus":"campus","NA Desktop":"desktop","NA Navigation":"navigation"}),T=(0,r.O)()({Kilometers:"kilometers",Miles:"miles",Meters:"meters"},{ignoreUnknown:!1}),N=(0,r.O)()({Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),S=(0,r.O)()({Kilometers:"kilometers",Miles:"miles",Meters:"meters",Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),U=(0,r.O)()({"Any Hazmat Prohibited":"any-hazmat-prohibited","Avoid Carpool Roads":"avoid-carpool-roads","Avoid Express Lanes":"avoid-express-lanes","Avoid Ferries":"avoid-ferries","Avoid Gates":"avoid-gates","Avoid Limited Access Roads":"avoid-limited-access-roads","Avoid Private Roads":"avoid-private-roads","Avoid Roads Unsuitable for Pedestrians":"avoid-roads-unsuitable-for-pedestrians","Avoid Stairways":"avoid-stairways","Avoid Toll Roads":"avoid-toll-roads","Avoid Toll Roads for Trucks":"avoid-toll-roads-for-trucks","Avoid Truck Restricted Roads":"avoid-truck-restricted-roads","Avoid Unpaved Roads":"avoid-unpaved-roads","Axle Count Restriction":"axle-count-restriction","Driving a Bus":"driving-a-bus","Driving a Taxi":"driving-a-taxi","Driving a Truck":"driving-a-truck","Driving an Automobile":"driving-an-automobile","Driving an Emergency Vehicle":"driving-an-emergency-vehicle","Height Restriction":"height-restriction","Kingpin to Rear Axle Length Restriction":"kingpin-to-rear-axle-length-restriction","Length Restriction":"length-restriction","Preferred for Pedestrians":"preferred-for-pedestrians","Riding a Motorcycle":"riding-a-motorcycle","Roads Under Construction Prohibited":"roads-under-construction-prohibited","Semi or Tractor with One or More Trailers Prohibited":"semi-or-tractor-with-one-or-more-trailers-prohibited","Single Axle Vehicles Prohibited":"single-axle-vehicles-prohibited","Tandem Axle Vehicles Prohibited":"tandem-axle-vehicles-prohibited","Through Traffic Prohibited":"through-traffic-prohibited","Truck with Trailers Restriction":"truck-with-trailers-restriction","Use Preferred Hazmat Routes":"use-preferred-hazmat-routes","Use Preferred Truck Routes":"use-preferred-truck-routes",Walking:"walking","Weight Restriction":"weight-restriction"},{ignoreUnknown:!1}),M=(0,r.O)()({esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelEnvelopeIntersects:"envelope-intersects",esriSpatialRelIndexIntersects:"index-intersects",esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:"relation"}),O=(0,r.O)()({esriGeometryPoint:"point",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"envelope",esriGeometryMultipoint:"multipoint"}),D=(0,r.O)()({esriNAUTCost:"cost",esriNAUTDescriptor:"descriptor",esriNAUTRestriction:"restriction",esriNAUTHierarchy:"hierarchy"}),b=(0,r.O)()({esriDSTAltName:"alt-name",esriDSTArrive:"arrive",esriDSTBranch:"branch",esriDSTCrossStreet:"cross-street",esriDSTCumulativeLength:"cumulative-length",esriDSTDepart:"depart",esriDSTEstimatedArrivalTime:"estimated-arrival-time",esriDSTExit:"exit",esriDSTGeneral:"general",esriDSTLength:"length",esriDSTServiceTime:"service-time",esriDSTStreetName:"street-name",esriDSTSummary:"summary",esriDSTTime:"time",esriDSTTimeWindow:"time-window",esriDSTToward:"toward",esriDSTViolationTime:"violation-time",esriDSTWaitTime:"wait-time"})}}]);
//# sourceMappingURL=46640.243225ed.chunk.js.map